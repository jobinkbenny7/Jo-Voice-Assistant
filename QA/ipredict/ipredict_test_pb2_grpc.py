# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ipredict_test_pb2 as ipredict__test__pb2


class CostSenseIPredictTestingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Hyperparametertuning = channel.unary_unary(
                '/cazelabs.costsense.apis.v1.CostSenseIPredictTesting/Hyperparametertuning',
                request_serializer=ipredict__test__pb2.TestRequest.SerializeToString,
                response_deserializer=ipredict__test__pb2.TestResponse.FromString,
                )
        self.Readingtablenames = channel.unary_unary(
                '/cazelabs.costsense.apis.v1.CostSenseIPredictTesting/Readingtablenames',
                request_serializer=ipredict__test__pb2.TableRequest.SerializeToString,
                response_deserializer=ipredict__test__pb2.TableResponse.FromString,
                )
        self.trainingvalidation = channel.unary_unary(
                '/cazelabs.costsense.apis.v1.CostSenseIPredictTesting/trainingvalidation',
                request_serializer=ipredict__test__pb2.accuracyReq.SerializeToString,
                response_deserializer=ipredict__test__pb2.accuracyResponse.FromString,
                )


class CostSenseIPredictTestingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Hyperparametertuning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Readingtablenames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def trainingvalidation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CostSenseIPredictTestingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Hyperparametertuning': grpc.unary_unary_rpc_method_handler(
                    servicer.Hyperparametertuning,
                    request_deserializer=ipredict__test__pb2.TestRequest.FromString,
                    response_serializer=ipredict__test__pb2.TestResponse.SerializeToString,
            ),
            'Readingtablenames': grpc.unary_unary_rpc_method_handler(
                    servicer.Readingtablenames,
                    request_deserializer=ipredict__test__pb2.TableRequest.FromString,
                    response_serializer=ipredict__test__pb2.TableResponse.SerializeToString,
            ),
            'trainingvalidation': grpc.unary_unary_rpc_method_handler(
                    servicer.trainingvalidation,
                    request_deserializer=ipredict__test__pb2.accuracyReq.FromString,
                    response_serializer=ipredict__test__pb2.accuracyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cazelabs.costsense.apis.v1.CostSenseIPredictTesting', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CostSenseIPredictTesting(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Hyperparametertuning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cazelabs.costsense.apis.v1.CostSenseIPredictTesting/Hyperparametertuning',
            ipredict__test__pb2.TestRequest.SerializeToString,
            ipredict__test__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Readingtablenames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cazelabs.costsense.apis.v1.CostSenseIPredictTesting/Readingtablenames',
            ipredict__test__pb2.TableRequest.SerializeToString,
            ipredict__test__pb2.TableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def trainingvalidation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cazelabs.costsense.apis.v1.CostSenseIPredictTesting/trainingvalidation',
            ipredict__test__pb2.accuracyReq.SerializeToString,
            ipredict__test__pb2.accuracyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
