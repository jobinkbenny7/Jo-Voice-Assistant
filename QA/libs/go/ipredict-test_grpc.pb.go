// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: ipredict-test.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CostSenseIPredictTesting_Hyperparametertuning_FullMethodName = "/cazelabs.costsense.apis.v1.CostSenseIPredictTesting/Hyperparametertuning"
	CostSenseIPredictTesting_Readingtablenames_FullMethodName    = "/cazelabs.costsense.apis.v1.CostSenseIPredictTesting/Readingtablenames"
	CostSenseIPredictTesting_Trainingvalidation_FullMethodName   = "/cazelabs.costsense.apis.v1.CostSenseIPredictTesting/trainingvalidation"
)

// CostSenseIPredictTestingClient is the client API for CostSenseIPredictTesting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostSenseIPredictTestingClient interface {
	Hyperparametertuning(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	Readingtablenames(ctx context.Context, in *TableRequest, opts ...grpc.CallOption) (*TableResponse, error)
	Trainingvalidation(ctx context.Context, in *AccuracyReq, opts ...grpc.CallOption) (*AccuracyResponse, error)
}

type costSenseIPredictTestingClient struct {
	cc grpc.ClientConnInterface
}

func NewCostSenseIPredictTestingClient(cc grpc.ClientConnInterface) CostSenseIPredictTestingClient {
	return &costSenseIPredictTestingClient{cc}
}

func (c *costSenseIPredictTestingClient) Hyperparametertuning(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, CostSenseIPredictTesting_Hyperparametertuning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSenseIPredictTestingClient) Readingtablenames(ctx context.Context, in *TableRequest, opts ...grpc.CallOption) (*TableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableResponse)
	err := c.cc.Invoke(ctx, CostSenseIPredictTesting_Readingtablenames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSenseIPredictTestingClient) Trainingvalidation(ctx context.Context, in *AccuracyReq, opts ...grpc.CallOption) (*AccuracyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccuracyResponse)
	err := c.cc.Invoke(ctx, CostSenseIPredictTesting_Trainingvalidation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostSenseIPredictTestingServer is the server API for CostSenseIPredictTesting service.
// All implementations must embed UnimplementedCostSenseIPredictTestingServer
// for forward compatibility
type CostSenseIPredictTestingServer interface {
	Hyperparametertuning(context.Context, *TestRequest) (*TestResponse, error)
	Readingtablenames(context.Context, *TableRequest) (*TableResponse, error)
	Trainingvalidation(context.Context, *AccuracyReq) (*AccuracyResponse, error)
	mustEmbedUnimplementedCostSenseIPredictTestingServer()
}

// UnimplementedCostSenseIPredictTestingServer must be embedded to have forward compatible implementations.
type UnimplementedCostSenseIPredictTestingServer struct {
}

func (UnimplementedCostSenseIPredictTestingServer) Hyperparametertuning(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hyperparametertuning not implemented")
}
func (UnimplementedCostSenseIPredictTestingServer) Readingtablenames(context.Context, *TableRequest) (*TableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readingtablenames not implemented")
}
func (UnimplementedCostSenseIPredictTestingServer) Trainingvalidation(context.Context, *AccuracyReq) (*AccuracyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trainingvalidation not implemented")
}
func (UnimplementedCostSenseIPredictTestingServer) mustEmbedUnimplementedCostSenseIPredictTestingServer() {
}

// UnsafeCostSenseIPredictTestingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostSenseIPredictTestingServer will
// result in compilation errors.
type UnsafeCostSenseIPredictTestingServer interface {
	mustEmbedUnimplementedCostSenseIPredictTestingServer()
}

func RegisterCostSenseIPredictTestingServer(s grpc.ServiceRegistrar, srv CostSenseIPredictTestingServer) {
	s.RegisterService(&CostSenseIPredictTesting_ServiceDesc, srv)
}

func _CostSenseIPredictTesting_Hyperparametertuning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictTestingServer).Hyperparametertuning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredictTesting_Hyperparametertuning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictTestingServer).Hyperparametertuning(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSenseIPredictTesting_Readingtablenames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictTestingServer).Readingtablenames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredictTesting_Readingtablenames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictTestingServer).Readingtablenames(ctx, req.(*TableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSenseIPredictTesting_Trainingvalidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccuracyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictTestingServer).Trainingvalidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredictTesting_Trainingvalidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictTestingServer).Trainingvalidation(ctx, req.(*AccuracyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CostSenseIPredictTesting_ServiceDesc is the grpc.ServiceDesc for CostSenseIPredictTesting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CostSenseIPredictTesting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cazelabs.costsense.apis.v1.CostSenseIPredictTesting",
	HandlerType: (*CostSenseIPredictTestingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hyperparametertuning",
			Handler:    _CostSenseIPredictTesting_Hyperparametertuning_Handler,
		},
		{
			MethodName: "Readingtablenames",
			Handler:    _CostSenseIPredictTesting_Readingtablenames_Handler,
		},
		{
			MethodName: "trainingvalidation",
			Handler:    _CostSenseIPredictTesting_Trainingvalidation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipredict-test.proto",
}
