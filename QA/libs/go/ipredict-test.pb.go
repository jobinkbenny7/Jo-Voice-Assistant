// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: ipredict-test.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipredict_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipredict_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_ipredict_test_proto_rawDescGZIP(), []int{0}
}

func (x *TestRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

type TestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestStatus bool `protobuf:"varint,1,opt,name=testStatus,proto3" json:"testStatus,omitempty"`
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipredict_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipredict_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_ipredict_test_proto_rawDescGZIP(), []int{1}
}

func (x *TestResponse) GetTestStatus() bool {
	if x != nil {
		return x.TestStatus
	}
	return false
}

type TableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Tablename string `protobuf:"bytes,3,opt,name=tablename,proto3" json:"tablename,omitempty"`
}

func (x *TableRequest) Reset() {
	*x = TableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipredict_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRequest) ProtoMessage() {}

func (x *TableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipredict_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRequest.ProtoReflect.Descriptor instead.
func (*TableRequest) Descriptor() ([]byte, []int) {
	return file_ipredict_test_proto_rawDescGZIP(), []int{2}
}

func (x *TableRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TableRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *TableRequest) GetTablename() string {
	if x != nil {
		return x.Tablename
	}
	return ""
}

type TableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []string `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *TableResponse) Reset() {
	*x = TableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipredict_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableResponse) ProtoMessage() {}

func (x *TableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipredict_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableResponse.ProtoReflect.Descriptor instead.
func (*TableResponse) Descriptor() ([]byte, []int) {
	return file_ipredict_test_proto_rawDescGZIP(), []int{3}
}

func (x *TableResponse) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

type AccuracyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject               string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Growth                *string  `protobuf:"bytes,2,opt,name=growth,proto3,oneof" json:"growth,omitempty"`
	SeasonalityMode       *string  `protobuf:"bytes,3,opt,name=seasonalityMode,proto3,oneof" json:"seasonalityMode,omitempty"`
	ChangepointPriorScale *float64 `protobuf:"fixed64,4,opt,name=changepointPriorScale,proto3,oneof" json:"changepointPriorScale,omitempty"`
	HolidaysPriorScale    *float64 `protobuf:"fixed64,5,opt,name=holidaysPriorScale,proto3,oneof" json:"holidaysPriorScale,omitempty"`
	IntervalWidth         *float64 `protobuf:"fixed64,6,opt,name=intervalWidth,proto3,oneof" json:"intervalWidth,omitempty"`
	SeasonalityPriorScale *int32   `protobuf:"varint,7,opt,name=seasonalityPriorScale,proto3,oneof" json:"seasonalityPriorScale,omitempty"`
	DailySeasonality      *bool    `protobuf:"varint,8,opt,name=dailySeasonality,proto3,oneof" json:"dailySeasonality,omitempty"`
	McmcSamples           *int32   `protobuf:"varint,9,opt,name=mcmcSamples,proto3,oneof" json:"mcmcSamples,omitempty"`
}

func (x *AccuracyReq) Reset() {
	*x = AccuracyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipredict_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccuracyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccuracyReq) ProtoMessage() {}

func (x *AccuracyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipredict_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccuracyReq.ProtoReflect.Descriptor instead.
func (*AccuracyReq) Descriptor() ([]byte, []int) {
	return file_ipredict_test_proto_rawDescGZIP(), []int{4}
}

func (x *AccuracyReq) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *AccuracyReq) GetGrowth() string {
	if x != nil && x.Growth != nil {
		return *x.Growth
	}
	return ""
}

func (x *AccuracyReq) GetSeasonalityMode() string {
	if x != nil && x.SeasonalityMode != nil {
		return *x.SeasonalityMode
	}
	return ""
}

func (x *AccuracyReq) GetChangepointPriorScale() float64 {
	if x != nil && x.ChangepointPriorScale != nil {
		return *x.ChangepointPriorScale
	}
	return 0
}

func (x *AccuracyReq) GetHolidaysPriorScale() float64 {
	if x != nil && x.HolidaysPriorScale != nil {
		return *x.HolidaysPriorScale
	}
	return 0
}

func (x *AccuracyReq) GetIntervalWidth() float64 {
	if x != nil && x.IntervalWidth != nil {
		return *x.IntervalWidth
	}
	return 0
}

func (x *AccuracyReq) GetSeasonalityPriorScale() int32 {
	if x != nil && x.SeasonalityPriorScale != nil {
		return *x.SeasonalityPriorScale
	}
	return 0
}

func (x *AccuracyReq) GetDailySeasonality() bool {
	if x != nil && x.DailySeasonality != nil {
		return *x.DailySeasonality
	}
	return false
}

func (x *AccuracyReq) GetMcmcSamples() int32 {
	if x != nil && x.McmcSamples != nil {
		return *x.McmcSamples
	}
	return 0
}

type AccuracyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainMAE      float64 `protobuf:"fixed64,1,opt,name=trainMAE,proto3" json:"trainMAE,omitempty"`
	TrainMSE      float64 `protobuf:"fixed64,2,opt,name=trainMSE,proto3" json:"trainMSE,omitempty"`
	TrainAccuracy float64 `protobuf:"fixed64,3,opt,name=trainAccuracy,proto3" json:"trainAccuracy,omitempty"`
	TestMAE       float64 `protobuf:"fixed64,4,opt,name=testMAE,proto3" json:"testMAE,omitempty"`
	TestMSE       float64 `protobuf:"fixed64,5,opt,name=testMSE,proto3" json:"testMSE,omitempty"`
	TestAccuracy  float64 `protobuf:"fixed64,6,opt,name=testAccuracy,proto3" json:"testAccuracy,omitempty"`
}

func (x *AccuracyResponse) Reset() {
	*x = AccuracyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipredict_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccuracyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccuracyResponse) ProtoMessage() {}

func (x *AccuracyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipredict_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccuracyResponse.ProtoReflect.Descriptor instead.
func (*AccuracyResponse) Descriptor() ([]byte, []int) {
	return file_ipredict_test_proto_rawDescGZIP(), []int{5}
}

func (x *AccuracyResponse) GetTrainMAE() float64 {
	if x != nil {
		return x.TrainMAE
	}
	return 0
}

func (x *AccuracyResponse) GetTrainMSE() float64 {
	if x != nil {
		return x.TrainMSE
	}
	return 0
}

func (x *AccuracyResponse) GetTrainAccuracy() float64 {
	if x != nil {
		return x.TrainAccuracy
	}
	return 0
}

func (x *AccuracyResponse) GetTestMAE() float64 {
	if x != nil {
		return x.TestMAE
	}
	return 0
}

func (x *AccuracyResponse) GetTestMSE() float64 {
	if x != nil {
		return x.TestMSE
	}
	return 0
}

func (x *AccuracyResponse) GetTestAccuracy() float64 {
	if x != nil {
		return x.TestAccuracy
	}
	return 0
}

var File_ipredict_test_proto protoreflect.FileDescriptor

var file_ipredict_test_proto_rawDesc = []byte{
	0x0a, 0x13, 0x69, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x61, 0x7a, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0b,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x2e, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x27, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xc2, 0x04, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x02, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x68,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x12, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x15, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x06, 0x52, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x63, 0x6d, 0x63, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0b,
	0x6d, 0x63, 0x6d, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x68, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x63, 0x6d, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22,
	0xc8, 0x01, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4d, 0x41, 0x45,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4d, 0x41, 0x45,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4d, 0x53, 0x45, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4d, 0x53, 0x45, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x41, 0x45, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x41, 0x45, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x65, 0x73, 0x74, 0x4d, 0x53, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x4d, 0x53, 0x45, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x32, 0xe2, 0x02, 0x0a, 0x18, 0x43,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x14, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x27, 0x2e, 0x63, 0x61, 0x7a, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x73,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x61, 0x7a, 0x65, 0x6c,
	0x61, 0x62, 0x73, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x61, 0x7a, 0x65,
	0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x61, 0x7a, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x61, 0x7a, 0x65, 0x6c, 0x61, 0x62,
	0x73, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x2c, 0x2e, 0x63, 0x61, 0x7a, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x73,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0xba, 0x01, 0x92, 0x41, 0x8b, 0x01, 0x12, 0x73, 0x0a, 0x0f, 0x43, 0x6f, 0x73, 0x74, 0x20, 0x53,
	0x65, 0x6e, 0x73, 0x65, 0x20, 0x41, 0x50, 0x49, 0x73, 0x22, 0x59, 0x0a, 0x12, 0x43, 0x6f, 0x73,
	0x74, 0x20, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x26, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x7a, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x73,
	0x74, 0x2d, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x1b, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x40, 0x63, 0x61, 0x7a, 0x65, 0x6c, 0x61, 0x62, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61,
	0x7a, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x67, 0x6f, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipredict_test_proto_rawDescOnce sync.Once
	file_ipredict_test_proto_rawDescData = file_ipredict_test_proto_rawDesc
)

func file_ipredict_test_proto_rawDescGZIP() []byte {
	file_ipredict_test_proto_rawDescOnce.Do(func() {
		file_ipredict_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipredict_test_proto_rawDescData)
	})
	return file_ipredict_test_proto_rawDescData
}

var file_ipredict_test_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ipredict_test_proto_goTypes = []any{
	(*TestRequest)(nil),      // 0: cazelabs.costsense.apis.v1.TestRequest
	(*TestResponse)(nil),     // 1: cazelabs.costsense.apis.v1.TestResponse
	(*TableRequest)(nil),     // 2: cazelabs.costsense.apis.v1.TableRequest
	(*TableResponse)(nil),    // 3: cazelabs.costsense.apis.v1.TableResponse
	(*AccuracyReq)(nil),      // 4: cazelabs.costsense.apis.v1.accuracyReq
	(*AccuracyResponse)(nil), // 5: cazelabs.costsense.apis.v1.accuracyResponse
}
var file_ipredict_test_proto_depIdxs = []int32{
	0, // 0: cazelabs.costsense.apis.v1.CostSenseIPredictTesting.Hyperparametertuning:input_type -> cazelabs.costsense.apis.v1.TestRequest
	2, // 1: cazelabs.costsense.apis.v1.CostSenseIPredictTesting.Readingtablenames:input_type -> cazelabs.costsense.apis.v1.TableRequest
	4, // 2: cazelabs.costsense.apis.v1.CostSenseIPredictTesting.trainingvalidation:input_type -> cazelabs.costsense.apis.v1.accuracyReq
	1, // 3: cazelabs.costsense.apis.v1.CostSenseIPredictTesting.Hyperparametertuning:output_type -> cazelabs.costsense.apis.v1.TestResponse
	3, // 4: cazelabs.costsense.apis.v1.CostSenseIPredictTesting.Readingtablenames:output_type -> cazelabs.costsense.apis.v1.TableResponse
	5, // 5: cazelabs.costsense.apis.v1.CostSenseIPredictTesting.trainingvalidation:output_type -> cazelabs.costsense.apis.v1.accuracyResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ipredict_test_proto_init() }
func file_ipredict_test_proto_init() {
	if File_ipredict_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipredict_test_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipredict_test_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipredict_test_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipredict_test_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipredict_test_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AccuracyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipredict_test_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AccuracyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ipredict_test_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipredict_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipredict_test_proto_goTypes,
		DependencyIndexes: file_ipredict_test_proto_depIdxs,
		MessageInfos:      file_ipredict_test_proto_msgTypes,
	}.Build()
	File_ipredict_test_proto = out.File
	file_ipredict_test_proto_rawDesc = nil
	file_ipredict_test_proto_goTypes = nil
	file_ipredict_test_proto_depIdxs = nil
}
