syntax = "proto3";

package cazelabs.costsense.apis.v1;
option go_package = "github.com/cazelabs/cost-sense/libs/go;v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Cost Sense APIs";
    version: "1.0.0";
    contact: {
      name: "Cost Sense Project";
      url: "https://github.com/cazelabs/cost-sense";
      email: "team.costsense@cazelabs.com";
    };
  };
  consumes: "application/json";
  schemes: HTTP;
  schemes: HTTPS;
};

message TestRequest {
  string subject = 1;
}

message TestResponse {
  bool testStatus = 1;
}
message TableRequest {
  string address = 1;
  string port = 2;
  string tablename = 3;
}

message TableResponse {
  repeated string tables = 1;
}
message accuracyReq {
  string subject = 1;
  optional string growth = 2;
  optional string seasonalityMode = 3;
  optional double changepointPriorScale = 4;
  optional double holidaysPriorScale = 5;
  optional double intervalWidth = 6;
  optional int32 seasonalityPriorScale = 7;
  optional bool dailySeasonality = 8;
  optional int32 mcmcSamples = 9;
}

message accuracyResponse {
  double trainMAE = 1;
  double trainMSE = 2;
  double trainAccuracy = 3;
  double testMAE = 4;
  double testMSE = 5;
  double testAccuracy = 6;
}

service CostSenseIPredictTesting {
  rpc Hyperparametertuning(TestRequest) returns (TestResponse) {}
  rpc Readingtablenames(TableRequest) returns (TableResponse) {}
  rpc trainingvalidation(accuracyReq) returns (accuracyResponse) {}
}
