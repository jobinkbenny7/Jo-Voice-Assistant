// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: ipredict/gen_code/ipredict-interface-v1.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CostSenseIPredictTraining_PushMetrics_FullMethodName   = "/cazelabs.costsense.apis.v1.CostSenseIPredictTraining/PushMetrics"
	CostSenseIPredictTraining_CurrentStatus_FullMethodName = "/cazelabs.costsense.apis.v1.CostSenseIPredictTraining/CurrentStatus"
	CostSenseIPredictTraining_DeleteTable_FullMethodName   = "/cazelabs.costsense.apis.v1.CostSenseIPredictTraining/DeleteTable"
)

// CostSenseIPredictTrainingClient is the client API for CostSenseIPredictTraining service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostSenseIPredictTrainingClient interface {
	PushMetrics(ctx context.Context, in *PushMetricsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CurrentStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type costSenseIPredictTrainingClient struct {
	cc grpc.ClientConnInterface
}

func NewCostSenseIPredictTrainingClient(cc grpc.ClientConnInterface) CostSenseIPredictTrainingClient {
	return &costSenseIPredictTrainingClient{cc}
}

func (c *costSenseIPredictTrainingClient) PushMetrics(ctx context.Context, in *PushMetricsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CostSenseIPredictTraining_PushMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSenseIPredictTrainingClient) CurrentStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, CostSenseIPredictTraining_CurrentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSenseIPredictTrainingClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CostSenseIPredictTraining_DeleteTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostSenseIPredictTrainingServer is the server API for CostSenseIPredictTraining service.
// All implementations must embed UnimplementedCostSenseIPredictTrainingServer
// for forward compatibility
type CostSenseIPredictTrainingServer interface {
	PushMetrics(context.Context, *PushMetricsRequest) (*emptypb.Empty, error)
	CurrentStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	DeleteTable(context.Context, *DeleteTableRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCostSenseIPredictTrainingServer()
}

// UnimplementedCostSenseIPredictTrainingServer must be embedded to have forward compatible implementations.
type UnimplementedCostSenseIPredictTrainingServer struct {
}

func (UnimplementedCostSenseIPredictTrainingServer) PushMetrics(context.Context, *PushMetricsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMetrics not implemented")
}
func (UnimplementedCostSenseIPredictTrainingServer) CurrentStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentStatus not implemented")
}
func (UnimplementedCostSenseIPredictTrainingServer) DeleteTable(context.Context, *DeleteTableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedCostSenseIPredictTrainingServer) mustEmbedUnimplementedCostSenseIPredictTrainingServer() {
}

// UnsafeCostSenseIPredictTrainingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostSenseIPredictTrainingServer will
// result in compilation errors.
type UnsafeCostSenseIPredictTrainingServer interface {
	mustEmbedUnimplementedCostSenseIPredictTrainingServer()
}

func RegisterCostSenseIPredictTrainingServer(s grpc.ServiceRegistrar, srv CostSenseIPredictTrainingServer) {
	s.RegisterService(&CostSenseIPredictTraining_ServiceDesc, srv)
}

func _CostSenseIPredictTraining_PushMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictTrainingServer).PushMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredictTraining_PushMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictTrainingServer).PushMetrics(ctx, req.(*PushMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSenseIPredictTraining_CurrentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictTrainingServer).CurrentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredictTraining_CurrentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictTrainingServer).CurrentStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSenseIPredictTraining_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictTrainingServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredictTraining_DeleteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictTrainingServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CostSenseIPredictTraining_ServiceDesc is the grpc.ServiceDesc for CostSenseIPredictTraining service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CostSenseIPredictTraining_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cazelabs.costsense.apis.v1.CostSenseIPredictTraining",
	HandlerType: (*CostSenseIPredictTrainingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMetrics",
			Handler:    _CostSenseIPredictTraining_PushMetrics_Handler,
		},
		{
			MethodName: "CurrentStatus",
			Handler:    _CostSenseIPredictTraining_CurrentStatus_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _CostSenseIPredictTraining_DeleteTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipredict/gen_code/ipredict-interface-v1.proto",
}

const (
	CostSenseIPredict_Trend_FullMethodName         = "/cazelabs.costsense.apis.v1.CostSenseIPredict/Trend"
	CostSenseIPredict_Anomaly_FullMethodName       = "/cazelabs.costsense.apis.v1.CostSenseIPredict/Anomaly"
	CostSenseIPredict_AnomalyReport_FullMethodName = "/cazelabs.costsense.apis.v1.CostSenseIPredict/AnomalyReport"
	CostSenseIPredict_Budget_FullMethodName        = "/cazelabs.costsense.apis.v1.CostSenseIPredict/Budget"
	CostSenseIPredict_NewBudget_FullMethodName     = "/cazelabs.costsense.apis.v1.CostSenseIPredict/NewBudget"
	CostSenseIPredict_NewPrice_FullMethodName      = "/cazelabs.costsense.apis.v1.CostSenseIPredict/NewPrice"
)

// CostSenseIPredictClient is the client API for CostSenseIPredict service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostSenseIPredictClient interface {
	Trend(ctx context.Context, in *TrendReq, opts ...grpc.CallOption) (*TrendRes, error)
	Anomaly(ctx context.Context, in *AnomalyReq, opts ...grpc.CallOption) (*AnomalyRes, error)
	AnomalyReport(ctx context.Context, in *AnomalyReportReq, opts ...grpc.CallOption) (*AnomalyReportRes, error)
	Budget(ctx context.Context, in *BudgetReq, opts ...grpc.CallOption) (*BudgetRes, error)
	NewBudget(ctx context.Context, in *NewBudgetReq, opts ...grpc.CallOption) (*NewBudgetRes, error)
	NewPrice(ctx context.Context, in *NewPriceReq, opts ...grpc.CallOption) (*NewPriceRes, error)
}

type costSenseIPredictClient struct {
	cc grpc.ClientConnInterface
}

func NewCostSenseIPredictClient(cc grpc.ClientConnInterface) CostSenseIPredictClient {
	return &costSenseIPredictClient{cc}
}

func (c *costSenseIPredictClient) Trend(ctx context.Context, in *TrendReq, opts ...grpc.CallOption) (*TrendRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrendRes)
	err := c.cc.Invoke(ctx, CostSenseIPredict_Trend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSenseIPredictClient) Anomaly(ctx context.Context, in *AnomalyReq, opts ...grpc.CallOption) (*AnomalyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnomalyRes)
	err := c.cc.Invoke(ctx, CostSenseIPredict_Anomaly_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSenseIPredictClient) AnomalyReport(ctx context.Context, in *AnomalyReportReq, opts ...grpc.CallOption) (*AnomalyReportRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnomalyReportRes)
	err := c.cc.Invoke(ctx, CostSenseIPredict_AnomalyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSenseIPredictClient) Budget(ctx context.Context, in *BudgetReq, opts ...grpc.CallOption) (*BudgetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BudgetRes)
	err := c.cc.Invoke(ctx, CostSenseIPredict_Budget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSenseIPredictClient) NewBudget(ctx context.Context, in *NewBudgetReq, opts ...grpc.CallOption) (*NewBudgetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewBudgetRes)
	err := c.cc.Invoke(ctx, CostSenseIPredict_NewBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSenseIPredictClient) NewPrice(ctx context.Context, in *NewPriceReq, opts ...grpc.CallOption) (*NewPriceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewPriceRes)
	err := c.cc.Invoke(ctx, CostSenseIPredict_NewPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostSenseIPredictServer is the server API for CostSenseIPredict service.
// All implementations must embed UnimplementedCostSenseIPredictServer
// for forward compatibility
type CostSenseIPredictServer interface {
	Trend(context.Context, *TrendReq) (*TrendRes, error)
	Anomaly(context.Context, *AnomalyReq) (*AnomalyRes, error)
	AnomalyReport(context.Context, *AnomalyReportReq) (*AnomalyReportRes, error)
	Budget(context.Context, *BudgetReq) (*BudgetRes, error)
	NewBudget(context.Context, *NewBudgetReq) (*NewBudgetRes, error)
	NewPrice(context.Context, *NewPriceReq) (*NewPriceRes, error)
	mustEmbedUnimplementedCostSenseIPredictServer()
}

// UnimplementedCostSenseIPredictServer must be embedded to have forward compatible implementations.
type UnimplementedCostSenseIPredictServer struct {
}

func (UnimplementedCostSenseIPredictServer) Trend(context.Context, *TrendReq) (*TrendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trend not implemented")
}
func (UnimplementedCostSenseIPredictServer) Anomaly(context.Context, *AnomalyReq) (*AnomalyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Anomaly not implemented")
}
func (UnimplementedCostSenseIPredictServer) AnomalyReport(context.Context, *AnomalyReportReq) (*AnomalyReportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnomalyReport not implemented")
}
func (UnimplementedCostSenseIPredictServer) Budget(context.Context, *BudgetReq) (*BudgetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Budget not implemented")
}
func (UnimplementedCostSenseIPredictServer) NewBudget(context.Context, *NewBudgetReq) (*NewBudgetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBudget not implemented")
}
func (UnimplementedCostSenseIPredictServer) NewPrice(context.Context, *NewPriceReq) (*NewPriceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPrice not implemented")
}
func (UnimplementedCostSenseIPredictServer) mustEmbedUnimplementedCostSenseIPredictServer() {}

// UnsafeCostSenseIPredictServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostSenseIPredictServer will
// result in compilation errors.
type UnsafeCostSenseIPredictServer interface {
	mustEmbedUnimplementedCostSenseIPredictServer()
}

func RegisterCostSenseIPredictServer(s grpc.ServiceRegistrar, srv CostSenseIPredictServer) {
	s.RegisterService(&CostSenseIPredict_ServiceDesc, srv)
}

func _CostSenseIPredict_Trend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictServer).Trend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredict_Trend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictServer).Trend(ctx, req.(*TrendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSenseIPredict_Anomaly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnomalyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictServer).Anomaly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredict_Anomaly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictServer).Anomaly(ctx, req.(*AnomalyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSenseIPredict_AnomalyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnomalyReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictServer).AnomalyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredict_AnomalyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictServer).AnomalyReport(ctx, req.(*AnomalyReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSenseIPredict_Budget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BudgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictServer).Budget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredict_Budget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictServer).Budget(ctx, req.(*BudgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSenseIPredict_NewBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBudgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictServer).NewBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredict_NewBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictServer).NewBudget(ctx, req.(*NewBudgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSenseIPredict_NewPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSenseIPredictServer).NewPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSenseIPredict_NewPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSenseIPredictServer).NewPrice(ctx, req.(*NewPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CostSenseIPredict_ServiceDesc is the grpc.ServiceDesc for CostSenseIPredict service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CostSenseIPredict_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cazelabs.costsense.apis.v1.CostSenseIPredict",
	HandlerType: (*CostSenseIPredictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trend",
			Handler:    _CostSenseIPredict_Trend_Handler,
		},
		{
			MethodName: "Anomaly",
			Handler:    _CostSenseIPredict_Anomaly_Handler,
		},
		{
			MethodName: "AnomalyReport",
			Handler:    _CostSenseIPredict_AnomalyReport_Handler,
		},
		{
			MethodName: "Budget",
			Handler:    _CostSenseIPredict_Budget_Handler,
		},
		{
			MethodName: "NewBudget",
			Handler:    _CostSenseIPredict_NewBudget_Handler,
		},
		{
			MethodName: "NewPrice",
			Handler:    _CostSenseIPredict_NewPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipredict/gen_code/ipredict-interface-v1.proto",
}
